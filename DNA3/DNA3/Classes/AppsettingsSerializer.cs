// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using CodeBeautify;
//
//    var AppSettings = AppSettings.FromJson(jsonString);

namespace CodeBeautify {
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AppSettings {
        [JsonProperty("App")]
        public App App { get; set; }

        [JsonProperty("ConnectionStrings")]
        public ConnectionStrings ConnectionStrings { get; set; }

        [JsonProperty("PasswordRules")]
        public PasswordRules PasswordRules { get; set; }

        [JsonProperty("DOCS")]
        public Docs Docs { get; set; }

        [JsonProperty("SMOSettings")]
        public SmoSettings SmoSettings { get; set; }

        [JsonProperty("Smtp")]
        public Smtp Smtp { get; set; }

        [JsonProperty("Jwt")]
        public Jwt Jwt { get; set; }

        [JsonProperty("OktaSettings")]
        public OktaSettings OktaSettings { get; set; }

        [JsonProperty("GitHubSettings")]
        public GitHubSettings GitHubSettings { get; set; }

        [JsonProperty("NameCheapSettings")]
        public NameCheapSettings NameCheapSettings { get; set; }

        [JsonProperty("VerisignSettings")]
        public VerisignSettings VerisignSettings { get; set; }

        [JsonProperty("PayPalSettings")]
        public PayPalSettings PayPalSettings { get; set; }

        [JsonProperty("OVHCloudSettings")]
        public OvhCloudSettings OvhCloudSettings { get; set; }

        [JsonProperty("EBaySettings")]
        public EBaySettings EBaySettings { get; set; }

        [JsonProperty("EBidSettings")]
        public EBidSettings EBidSettings { get; set; }

        [JsonProperty("AllowedHosts")]
        public string AllowedHosts { get; set; }
    }

    public partial class App {
        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Shortname")]
        public string Shortname { get; set; }

        [JsonProperty("Version")]
        public string Version { get; set; }

        [JsonProperty("Domain")]
        public string Domain { get; set; }

        [JsonProperty("URL")]
        public Uri Url { get; set; }

        [JsonProperty("Keywords")]
        public string Keywords { get; set; }

        [JsonProperty("Tagline")]
        public string Tagline { get; set; }

        [JsonProperty("Description")]
        public string Description { get; set; }

        [JsonProperty("Copyright")]
        public string Copyright { get; set; }

        [JsonProperty("Company")]
        public string Company { get; set; }

        [JsonProperty("Address")]
        public string Address { get; set; }

        [JsonProperty("City")]
        public string City { get; set; }

        [JsonProperty("State")]
        public string State { get; set; }

        [JsonProperty("Zip")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long Zip { get; set; }

        [JsonProperty("Phone")]
        public string Phone { get; set; }

        [JsonProperty("Author")]
        public string Author { get; set; }

        [JsonProperty("BillingName")]
        public string BillingName { get; set; }

        [JsonProperty("BillingAddress")]
        public string BillingAddress { get; set; }

        [JsonProperty("SalesName")]
        public string SalesName { get; set; }

        [JsonProperty("SalesAddress")]
        public string SalesAddress { get; set; }

        [JsonProperty("SupportName")]
        public string SupportName { get; set; }

        [JsonProperty("SupportAddress")]
        public string SupportAddress { get; set; }

        [JsonProperty("Apple")]
        public Uri Apple { get; set; }

        [JsonProperty("Facebook")]
        public Uri Facebook { get; set; }

        [JsonProperty("Github")]
        public Uri Github { get; set; }

        [JsonProperty("Google")]
        public Uri Google { get; set; }

        [JsonProperty("Instagram")]
        public Uri Instagram { get; set; }

        [JsonProperty("Linkedin")]
        public Uri Linkedin { get; set; }

        [JsonProperty("Mastodon")]
        public Uri Mastodon { get; set; }

        [JsonProperty("Microsoft")]
        public Uri Microsoft { get; set; }

        [JsonProperty("Twitter")]
        public Uri Twitter { get; set; }

        [JsonProperty("Xing")]
        public Uri Xing { get; set; }

        [JsonProperty("Themename")]
        public string Themename { get; set; }

        [JsonProperty("Themepath")]
        public string Themepath { get; set; }
    }

    public partial class ConnectionStrings {
        [JsonProperty("MainContext")]
        public string MainContext { get; set; }

        [JsonProperty("DeveloperDash.Properties.Settings.CTD")]
        public string DeveloperDashPropertiesSettingsCtd { get; set; }
    }

    public partial class Docs {

        [JsonProperty("SourceFolderName")]
        [Display(Name = "Source Folder Path")]
        public string SourceFolderName { get; set; }

        [JsonProperty("BackupStoragePath")]
        [Display(Name = "Backup Storage Path")]
        public string BackupStoragePath { get; set; }
    }

    public partial class EBaySettings {

        [JsonProperty("AppID")]
        [Display(Name = "Application ID")]
        public string AppId { get; set; }

        [JsonProperty("DevID")]
        [Display(Name = "Developer ID")]
        public Guid DevId { get; set; }

        [JsonProperty("CertID")]
        [Display(Name = "Certificate ID")]
        public Guid CertId { get; set; }
    }

    public partial class EBidSettings {

        [JsonProperty("ApplicationID")]
        [Display(Name = "Application ID")]
        public string ApplicationId { get; set; }

        [JsonProperty("ApplicationKey")]
        [Display(Name = "Application Key")]
        public string ApplicationKey { get; set; }

        [JsonProperty("UserAccessToken")]
        [Display(Name = "User Access Token")]
        public string UserAccessToken { get; set; }
    }

    public partial class GitHubSettings {
        [JsonProperty("ClientId")]
        public string ClientId { get; set; }

        [JsonProperty("ClientSecret")]
        public string ClientSecret { get; set; }
    }

    public partial class Jwt {
        [JsonProperty("Key")]
        public string Key { get; set; }

        [JsonProperty("Issuer")]
        public Uri Issuer { get; set; }

        [JsonProperty("ExpireDays")]
        public long ExpireDays { get; set; }
    }

    public partial class NameCheapSettings {
        [JsonProperty("APIUser")]
        public string ApiUser { get; set; }

        [JsonProperty("APIKey")]
        public string ApiKey { get; set; }

        [JsonProperty("APIAddress")]
        public string ApiAddress { get; set; }
    }

    public partial class OktaSettings {
        [JsonProperty("Domain")]
        public Uri Domain { get; set; }

        [JsonProperty("ClientId")]
        public string ClientId { get; set; }

        [JsonProperty("ClientSecret")]
        public string ClientSecret { get; set; }
    }

    public partial class OvhCloudSettings {
        [JsonProperty("AllowedIP")]
        public string AllowedIp { get; set; }

        [JsonProperty("ApplicationKey")]
        public string ApplicationKey { get; set; }

        [JsonProperty("ApplicationSecret")]
        public string ApplicationSecret { get; set; }

        [JsonProperty("ConsumerKey")]
        public string ConsumerKey { get; set; }
    }

    public partial class PasswordRules {
        [JsonProperty("RequiredLength")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long RequiredLength { get; set; }

        [JsonProperty("RequiredUniqueChars")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long RequiredUniqueChars { get; set; }

        [JsonProperty("RequireDigit")]
        public bool RequireDigit { get; set; }

        [JsonProperty("RequireLowercase")]
        public bool RequireLowercase { get; set; }

        [JsonProperty("RequireNonAlphanumeric")]
        public bool RequireNonAlphanumeric { get; set; }

        [JsonProperty("RequireUppercase")]
        public bool RequireUppercase { get; set; }
    }

    public partial class PayPalSettings {
        [JsonProperty("ClientId")]
        public string ClientId { get; set; }

        [JsonProperty("ClientSecret")]
        public string ClientSecret { get; set; }

        [JsonProperty("Mode")]
        public string Mode { get; set; }
    }

    public partial class SmoSettings {
        [JsonProperty("ServerInstance")]
        public string ServerInstance { get; set; }

        [JsonProperty("LoginSecure")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public bool LoginSecure { get; set; }

        [JsonProperty("Login")]
        public string Login { get; set; }

        [JsonProperty("Password")]
        public string Password { get; set; }

        [JsonProperty("BackupStoragePath")]
        public string BackupStoragePath { get; set; }
    }

    public partial class Smtp {
        [JsonProperty("Host")]
        public string Host { get; set; }

        [JsonProperty("Port")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long Port { get; set; }

        [JsonProperty("User")]
        public string User { get; set; }

        [JsonProperty("Password")]
        public string Password { get; set; }

        [JsonProperty("From")]
        public string From { get; set; }
    }

    public partial class VerisignSettings {
        [JsonProperty("Portal")]
        public Uri Portal { get; set; }

        [JsonProperty("UserName")]
        public string UserName { get; set; }

        [JsonProperty("Password")]
        public string Password { get; set; }
    }

    public partial class AppSettings {
        public static AppSettings FromJson(string json) => JsonConvert.DeserializeObject<AppSettings>(json, CodeBeautify.Converter.Settings);
    }

    public static class Serialize {
        public static string ToJson(this AppSettings self) => JsonConvert.SerializeObject(self, CodeBeautify.Converter.Settings);
    }

    internal static class Converter {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleParseStringConverter : JsonConverter {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer) {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l)) {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer) {
            if (untypedValue == null) {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly PurpleParseStringConverter Singleton = new PurpleParseStringConverter();
    }

    internal class FluffyParseStringConverter : JsonConverter {
        public override bool CanConvert(Type t) => t == typeof(bool) || t == typeof(bool?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer) {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            bool b;
            if (Boolean.TryParse(value, out b)) {
                return b;
            }
            throw new Exception("Cannot unmarshal type bool");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer) {
            if (untypedValue == null) {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (bool)untypedValue;
            var boolString = value ? "true" : "false";
            serializer.Serialize(writer, boolString);
            return;
        }

        public static readonly FluffyParseStringConverter Singleton = new FluffyParseStringConverter();
    }
}
